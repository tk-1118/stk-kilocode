import type { ClineProviderState } from "../../webview/ClineProvider"
import { BACKEND_SPECIALTY_MODE_LIST, BASE_MODES } from "../../../shared/constants/unified-modes"

/**
 * 生成DDD开发指导原则section
 *
 * @param clineProviderState - ClineProvider状态信息
 * @returns DDD指导原则字符串
 */
export function getDddGuidelinesSection(clineProviderState?: ClineProviderState): string {
	// 检查当前是否为DDD相关模式
	const isDddMode = clineProviderState?.mode && isDddRelatedMode(clineProviderState.mode)

	if (!isDddMode) {
		return "" // 非DDD模式不显示DDD指导原则
	}

	return `====

DDD开发指导原则

## 核心原则
- **规范优先级**: 规范的优先级比代码要高，必须严格遵循DDD设计原则和代码规范
- **完美示例参考**: 所有DDD相关模式的提示词中都有完美的生成示例，必须尽情参考这些示例
- **生成前检查**: 生成前必须检查生成链路是否通畅，如果前置节点未执行，立刻停止并提醒用户先走前置节点

## 调用链路 (运行时流向)
Controller控制器或Client端口 → 应用服务(命令/查询) → 领域服务(或查询仓储) → 南向网关实现

## 生成链路 (开发时顺序)
产品项目结构 → 领域模型(实体、值对象) → 值对象映射 → 领域服务 → 领域事件发布 → 南向数据模型 → 南向仓储 → 南向资源网关 → 南向事件适配器 → 读模型 → 北向CQRS应用服务 → 北向API控制器 → 北向事件订阅 → 北向客户端提供 → 北向事件发布 → 客户端

## 生成前置检查规则
在开始任何DDD组件开发前，必须验证以下前置条件：

### 1. 基础设施层优先 (DEV-01)
- ✅ **必须先有**: 产品项目结构、DDD目录架构
- ❌ **禁止跳过**: 基础架构未搭建就开发业务组件

### 2. 领域层次之 (DEV-07 ~ DEV-10)
- ✅ **必须先有**: 基础设施层完成
- ✅ **当前可做**: 领域模型、值对象、值对象映射、领域服务、领域事件
- ❌ **禁止跳过**: 领域层未完成就开发网关层

### 3. 南向网关第三 (DEV-11 ~ DEV-15)
- ✅ **必须先有**: 领域层完成
- ✅ **当前可做**: 数据模型、仓储、资源网关、事件适配器、读模型
- ❌ **禁止跳过**: 南向网关未完成就开发北向网关

### 4. 北向网关第四 (DEV-02 ~ DEV-06)
- ✅ **必须先有**: 南向网关完成
- ✅ **当前可做**: CQRS应用服务、API控制器、事件订阅、客户端提供、事件发布
- ❌ **禁止跳过**: 北向网关未完成就开发客户端

### 5. 客户端层最后 (DEV-16)
- ✅ **必须先有**: 北向网关完成
- ✅ **当前可做**: 客户端接口、SDK封装
- ❌ **禁止跳过**: 内部服务未完成就暴露客户端接口

## 错误处理与迭代规范
- **问题回归**: 如果报错、迭代或解决bug，将问题回归到对应模块的单元测试中
- **测试驱动**: 每个DDD组件都应该有对应的单元测试来验证其正确性
- **错误追踪**: 记录每个错误的根因，确保类似问题不再发生

## 专业成员协作规范
DDD后端团队包含16个专业成员，严格按照DDD分层架构和开发顺序协作：

### 基础设施层 (DEV-01)
- **DEV-01**: 产品项目结构搭建 - 建立DDD项目的基础架构和目录结构

### 领域层 (DEV-07 ~ DEV-10)
- **DEV-07**: 领域模型与值对象 → **DEV-08**: 值对象映射 → **DEV-09**: 领域服务 → **DEV-10**: 领域事件发布

### 南向网关层 (DEV-11 ~ DEV-15)
- **DEV-11**: 南向数据模型 → **DEV-12**: 南向仓储 → **DEV-13**: 南向资源网关 → **DEV-14**: 南向事件适配器 → **DEV-15**: 读模型

### 北向网关层 (DEV-02 ~ DEV-06)
- **DEV-05**: 北向CQRS应用服务 → **DEV-02**: 北向API控制器 → **DEV-03**: 北向事件订阅 → **DEV-04**: 北向客户端提供 → **DEV-06**: 北向事件发布

### 客户端层 (DEV-16)
- **DEV-16**: 客户端开发 - 提供外部系统调用接口

### 协作原则
1. **严格分层开发**: 必须按照 基础设施 → 领域层 → 南向网关 → 北向网关 → 客户端 的顺序
2. **专业成员切换**: 根据当前DDD层次自动切换到对应的专业成员
3. **依赖关系管理**: 上层组件必须基于下层组件的完成结果
4. **DDD原则遵循**: 每个专业成员严格遵循DDD设计原则和最佳实践

## 强制执行检查点
在执行任何DDD相关任务前，必须回答以下问题：
1. **专业成员定位**: 当前任务应该由哪个专业成员(DEV-01~DEV-16)负责？
2. **DDD分层确认**: 当前组件属于哪个DDD分层(基础设施/领域/南向网关/北向网关/客户端)？
3. **前置依赖检查**: 下层组件是否已经完成？是否满足DDD分层依赖关系？
4. **开发顺序验证**: 是否严格按照DDD生成链路的顺序进行开发？
5. **示例参考确认**: 是否参考了对应专业成员提示词中的完美示例？
6. **DDD原则遵循**: 当前开发是否严格遵循DDD设计原则和代码规范？

**如果任何一个检查点未通过，必须立即停止当前任务，并明确告知用户需要先完成的前置工作或切换到正确的专业成员。**`
}

/**
 * 检查是否为DDD相关模式
 *
 * @param mode - 当前模式
 * @returns 是否为DDD相关模式
 */
function isDddRelatedMode(mode: string): boolean {
	// 🎯 统一数据源：使用统一常量模块中的后端专业模式列表
	// DDD相关模式包括：所有后端专业模式 + 系统架构师
	const dddModes: string[] = [
		...BACKEND_SPECIALTY_MODE_LIST,
		BASE_MODES.SA01_SYSTEM_ARCHITECT, // 架构师也需要了解DDD原则
	]

	return dddModes.includes(mode)
}
